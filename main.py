# То, что написано после решётки - это комментарий. Он не исполняется виртуальной машиной, и нужен для того,
# чтобы делать пометки к коду

# Значения хранятся в переменных. Переменная - это имя, по которому мы обращаемся к значению. Имя может быть любым,
# главное - чтобы было понятно, что в ней лежит. Например, если мы хотим хранить в переменной имя сотрудника,
# правильно будет назвать её employee_name

# Мы будем использовать функцию print для того, чтобы выводить полученные значения в консоль. Для того чтобы вызвать
# функцию, нужно написать её название, и после него указать скобки. В скобки мы пишем значение, которое хотим
# вывести в консоль. Например:
print('Hello world')

# Типы данных в питоне

# Целое число (integer, в питоне называется int)
my_integer = 5

# Целое число поддерживает математические операции

result = my_integer + 5  # Сложение
print(result)

result = my_integer - 5  # Вычетание
print(result)

result = my_integer * 5  # Умножение
print(result)

result = my_integer / 5  # Деление
print(result)

# Число с плавающей точкой (float, в питоне так же называется float). Пока будем считать, что это десятичная дробь
my_float = 6.7

# Числа с плавающей точкой также поддерживают математические операции

result = my_float + 5  # Сложение
print(result)

result = my_float - 5  # Вычетание
print(result)

result = my_float * 5  # Умножение
print(result)

result = my_float / 5  # Деление
print(result)

# Строки (string, в питоне называются str). По сути просто текст. Чтобы питон понимал, что мы передаём ему текст,
# нужно, чтобы значение было выделено кавычками
my_string = 'Hello'

# Базовая операция со строками - конкатенация, т.е. сложение двух строк. Производится черед знак +
result = my_string + ' world'
print(result)

result = my_string + ' python'
print(result)

# В строки можно помещать и текст на русском. Нюансы мы изучим позже
my_string = 'Привет, мир'
print(my_string)

# Есть ещё много операций со строками, но с ними мы познакомимся попозже


# Булев тип, он же логический тип (boolean, в питоне называется bool). По сути описывает, истинно что-то или ложно.
# Может быть либо True, либо False
my_boolean = False

# Теперь, когда у нас есть логический тип, мы можем сравнивать разные значения. Например, числа поддерживают сравнения

# Проверяем, больше ли наше число, чем 3. В my_integer мы поместили 5, следовательно, в результате будет True
result = my_integer > 3
print(result)

# Можно сравнить и в обратную сторону, тогда получим False
result = my_integer < 3
print(result)

# Также можно проверить, равны ли значения. Здесь есть важное замечание: знак = служит для того, чтобы присвоить чему-то
# какое-то значение, поэтому он не подходит для сравнения. Чтобы сравнить значения, используется ==
result = my_integer == 5
print(result)

# Логические операции, т.е. операции сравнения чего-либо с чем-либо, очень удобно использовать в условиях
if my_integer == 5:
    print('Yes, it is five')
else:
    print('No, it is not five')

# Такие конструкции нужны для того, чтобы мы выполняли разные действия в зависимости от разных условий

# В питоне есть коллекции - это тип данных, который объединяет в себе несколько значений

# Списки (list, в питоне также называется list). Объявляются через квадратные скобки
my_list = [1, 2, 3, 4]

# В список можно помещать набор значений любых типов
list_of_employees = [
    'Harry Potter',
    'Ronald Weasley',
    'Hermione Granger'
]

# Для работы с коллекциями очень удобно использовать циклы - это конструкции, которые выполняют код для каждого
# значения из набора
for employee in list_of_employees:  # Имя каждого работника из списка помещается в переменную employee
    print(employee)  # Здесь мы проводим операции с каждым отдельным значением в списке
    # Поскольку в списке лежат строки, мы можем их конкатенировать с другой строкой.
    # Поприветствуем каждого сотрудника
    print('Hello ' + employee)

# Мы можем брать отдельные элементы из списка по его порядковому номеру - индексу. Есть один нюанс - в программировании
# индексы всегда начинаются с нуля. Т.е., если элемент стоит первым в списке, то его индекс будет 0, вторым - 1 и т.д.
print(list_of_employees[1])  # Возьмёт второй по порядку элемент

# Можно менять значения списков по индексам
print(list_of_employees)
list_of_employees[1] = 'Draco Malfoy'  # Теперь вместо Рона будет Драко
print(list_of_employees)

# Словари (dictionary, в питоне называется dict), очень похожи на списки с тем лишь отличием, что вместо индексов
# здесь есть ключи. Очень удобно эти ключи делать текстом. Объявляются через фигурные скобки. Значение каждого ключа
# пишется через двоеточие

employees_salary = {
    'Harry Potter': 5000,
    'Ronald Weasley': 3000,
    'Hermione Granger': 6000
}

# Чтобы обратиться к значению в словаре, мы используем ключ вместо индекса
print(employees_salary['Hermione Granger'])  # Вывели зарплату Гермионы

# По словарям также можно пройтись циклом, с тем лишь отличием, что в переменную будет помещаться ключ, а не значение
for employee_name in employees_salary:  # В employee_name будет лежать ключ, в нашем случае, это имена
    # Чтобы получить значение, нужно обратиться к словарю с текущим ключом
    employee_salary = employees_salary[employee_name]
    # Можем использовать условие внутри цикла
    if employee_salary < 4000:
        print(employee_name + ' is not rich enough')
        # Поднимем зарплату всем, кто не очень богат в 2 раза
        new_salary = employee_salary * 2
        # Теперь поместим новую зарплату в список по имени работника в качестве ключе
        employees_salary[employee_name] = new_salary

        # Можно было поместить новую зарплату напрямую без отдельной переменной new_salary, но так код хуже читается
        employees_salary[employee_name] = employee_salary * 2
    else:
        print(employee_name + ' is rich enough')

# На выходе получили тот же словарь, но уже с обновлённой зарплатой
print(employees_salary)

# В словаре могут также лежать значения любого типа, например bool
wizards_are_half_blood = {
    'Harry Potter': True,
    'Ronald Weasley': False,
    'Hermione Granger': True
}

for wizard_name in wizards_are_half_blood:
    wizard_is_half_blood = wizards_are_half_blood[wizard_name]
    # Построим из себя Драко Малфоя
    if wizard_is_half_blood:
        print('Да как ты смеешь? Вонючая грязнокровка!')

eldians_descriptions = {
    'Эрен Йегер': 'нытик геноцидник',
    'Микаса Акерман': 'мощная девчонка',
    'Леви Акерман': 'фиджет спиннер',
    'Армин Арлерт': 'булочка с корицей'
}

for eldian_name in eldians_descriptions:
    eldian_description = eldians_descriptions[eldian_name]
    print(eldian_name + ' у нас ' + eldian_description)
